import hashlib
import os
import time
import requests
from flask import request, jsonify
from app.config import VIRUSTOTAL_API_KEY  # Import API key from config

def generate_file_hash(filepath):
    """Generate SHA-256 hash of the file."""
    sha256_hash = hashlib.sha256()
    with open(filepath, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def check_virustotal(file_hash):
    """Check the file hash against VirusTotal."""
    url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
    headers = {"x-apikey": VIRUSTOTAL_API_KEY}
    
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        result = response.json()
        stats = result.get("data", {}).get("attributes", {}).get("last_analysis_stats", {})
        return stats
    elif response.status_code == 404:
        return {"error": "File hash not found in VirusTotal database"}
    else:
        return {"error": f"Error contacting VirusTotal: {response.status_code}"}

def scan_files():
    """Scan the specified directory for malicious files using VirusTotal."""
    data = request.json
    directory = data.get("directory")

    if not directory or not os.path.exists(directory):
        return jsonify({"error": "Invalid directory"}), 400

    results = []
    for foldername, subfolders, filenames in os.walk(directory):
        for filename in filenames:
            filepath = os.path.join(foldername, filename)
            file_hash = generate_file_hash(filepath)
            vt_result = check_virustotal(file_hash)

            results.append({
                "file": filepath,
                "hash": file_hash,
                "virus_total_result": vt_result
            })

            # üîÅ Throttle to avoid 429 rate-limit errors
            time.sleep(20)

    return jsonify({"scan_results": results, "status": "Scan completed"})

__all__ = ["scan_files"]
